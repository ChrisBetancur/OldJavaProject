type: edu
files:
- name: src/Task.java
  visible: true
  text: |+
    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStreamReader;

    class ListNode {
        int val;
        ListNode next;
        ListNode(int x) { val = x; }
    }

    class Wrapper {


        public static int[] stringToIntegerArray(String input) {
            String in="1,1,1,2,2,3,4,5";
            String[] parts = in.split(",");
            int[] output = new int[parts.length];
            for(int index = 0; index < parts.length; index++) {
                String part = parts[index].trim();
                output[index] = Integer.parseInt(part);
            }
            return output;
        }

        public static ListNode stringToListNode(String input) {
            // Generate array from the input
            int[] nodeValues = stringToIntegerArray(input);

            // Now convert that list into linked list
            ListNode dummyRoot = new ListNode(0);
            ListNode ptr = dummyRoot;
            for(int item : nodeValues) {
                ptr.next = new ListNode(item);
                ptr = ptr.next;
            }
            return dummyRoot.next;
        }

        public static void prettyPrintLinkedList(ListNode node) {
            while (node != null && node.next != null) {
                System.out.print(node.val + "->");
                node = node.next;
            }

            if (node != null) {
                System.out.println(node.val);
            } else {
                System.out.println("Empty LinkedList");
            }
        }
    }

    public class Task {
        public static void main(String[] args) throws IOException {

            ListNode head=Wrapper.stringToListNode(line);
            while ((line = in.readLine()) != null) {
                ListNode node = Wrapper.stringToListNode(line);

            }
            ListNode node1,node2;
            node1=head;
            node2=node1.next;
            while(node1.next!=null){
                int total=1;
                while(node1.val==node2.val){
                    node2=node2.next;
                    total++;
                }
                node1.val=total*10+node1.val;
                node1.next=node2;
                if(node2.next!=null) node2=node2.next;



            }



            Wrapper.prettyPrintLinkedList(head);

        }


    static void talk(int n){

            if(n==0){
                return ;
            }else {
                System.out.println("从前有座山，山里有座庙，庙里有个和尚，和尚在讲故事");
                talk(n - 1);
            }
    }


    }


  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.Assert;
    import org.junit.Test;

    public class Tests {
      @Test
      public void testSolution() {
        // put your test here
        Assert.fail("Tests not implemented for the task");
      }
    }
  learner_created: false
status: Unchecked
record: -1
